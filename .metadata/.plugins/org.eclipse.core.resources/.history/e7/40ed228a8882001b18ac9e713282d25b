package hu.bme.mit.yakindu.analysis.workhere;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.junit.Test;
import org.yakindu.sct.model.sgraph.State;
import org.yakindu.sct.model.sgraph.Statechart;
import org.yakindu.sct.model.sgraph.Transition;
import org.yakindu.sct.model.sgraph.Vertex;

import hu.bme.mit.model2gml.Model2GML;
import hu.bme.mit.yakindu.analysis.modelmanager.ModelManager;

public class Main {
	@Test
	public void test() {
		main(new String[0]);
	}
	
	public static void main(String[] args) {
		ModelManager manager = new ModelManager();
		Model2GML model2gml = new Model2GML();
		
		// Loading model
		EObject root = manager.loadModel("model_input/example.sct");
		
		// Reading model
		Statechart s = (Statechart) root;
		TreeIterator<EObject> iterator = s.eAllContents();
		while (iterator.hasNext()) {
			EObject content = iterator.next();
			
			if(content instanceof State) {
				State state = (State) content;
				System.out.println(state.getName());
			}
			if(content instanceof Vertex) {
				Vertex transition = (Vertex) content;
				EList<Transition> out = transition.getOutgoingTransitions();
				EList<Transition> in = transition.getIncomingTransitions();
				EList<Transition> all = null;
				
				
				for(int i=0;i<out.size();i++){
					if(!all.contains(out.get(i))) {
						all.add(out.get(i));
						System.out.println(out.get(i).getSource().getName() + " -> " + out.get(i).getTarget().getName());
					}
				}
				
				for(int i=0;i<in.size();i++){
					System.out.println(in.get(i).getSource().getName() + " -> " + in.get(i).getTarget().getName());
				}
			}
			System.out.println();
		}
		
		// Transforming the model into a graph representation
		String content = model2gml.transform(root);
		// and saving it
		manager.saveFile("model_output/graph.gml", content);
	}
}
